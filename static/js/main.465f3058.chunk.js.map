{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","onInputChange","className","type","placeholder","onChange","Card","id","name","species","gender","status","console","log","alt","src","style","width","height","Scroll","props","overflow","border","marginBottom","children","App","event","setState","searchInput","target","value","state","rickAndMortyChars","fetch","then","response","json","chars","charsArray","results","this","filteredRickAndMortyChars","filter","char","toLowerCase","includes","length","map","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.465f3058.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBox = ({ onInputChange }) => {\n  return(\n    <div>\n      <input\n        className=' pa2 mb2 bg-washed-green ba br2 bw2 b--washed-green'\n        type='text'\n        placeholder='Search your fav character'\n        onChange={onInputChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;","import React from 'react';\n\nconst Card = ({ id, name, species, gender, status }) => {\n  console.log(status);\n  return(\n    <div className='ba bw2 br2 ma2 dib bg-light-yellow b--light-yellow shadow-5'>\n      <img\n        alt='rick-and-morty-character'\n        src={`https://rickandmortyapi.com/api/character/avatar/${id}.jpeg`}\n        style={{width:'250px', height:'250px' }}\n      />\n      <div>\n        <h2>{name}</h2>\n        {\n          gender !== 'unknown' ?\n            <h4>{`${species} ${gender}`}</h4> :\n            <h4>{`${species} species`}</h4>\n        }\n        {\n          status !== 'unknown' ?\n            <h5><i>Status - {status}</i></h5> :\n            <h5><i>Status -  Yet to be found</i></h5>\n        }\n        <h5>#{id}</h5>\n      </div>\n    </div>\n  );\n\n};\n\nexport default Card;","import React from 'react';\n\nconst Scroll = (props) => {\n  return(\n    <div style={{overflow:'scroll', border:'5px solid black', height:'800px', marginBottom:'200px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBox from '../components/SearchBox';\nimport Card from '../components/Card';\nimport Scroll from \"../components/Scroll\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rickAndMortyChars: [],\n      searchInput: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://rickandmortyapi.com/api/character/')\n      .then(response => response.json())\n      .then(chars => {\n        const charsArray = chars.results;\n        console.log('status', charsArray[0].status);\n        this.setState({rickAndMortyChars: charsArray})\n      });\n  }\n\n  onInputChange = (event) => {\n    this.setState({searchInput: event.target.value});\n  };\n\n  render() {\n    const { rickAndMortyChars, searchInput } = this.state;\n    const filteredRickAndMortyChars = rickAndMortyChars.filter(char => char.name.toLowerCase().includes(searchInput.toLowerCase()));\n    return !rickAndMortyChars.length\n      ? <h1 className='loading'>Loading</h1>\n      : <div className='tc'>\n          <p className='f1'>Rick And Morty</p>\n          <SearchBox onInputChange={this.onInputChange}/>\n          <Scroll>\n            {filteredRickAndMortyChars.map(char => {\n              return <Card id={char.id} name={char.name} species={char.species}\n                           gender={char.gender} status={char.status}/>\n            })}\n          </Scroll>\n        </div>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}